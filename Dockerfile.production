# Multi-stage Dockerfile for Production Deployment
# Optimized for security, performance, and minimal size

# Build stage
FROM rust:1.75-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    musl-dev \
    openssl-dev \
    openssl-libs-static \
    pkgconfig \
    git \
    cmake \
    make \
    g++

# Set environment variables for static linking
ENV OPENSSL_STATIC=1
ENV OPENSSL_DIR=/usr
ENV PKG_CONFIG_ALLOW_CROSS=1
ENV RUSTFLAGS="-C target-feature=+crt-static"

# Create app user
RUN addgroup -g 1000 ectus && \
    adduser -D -s /bin/sh -u 1000 -G ectus ectus

# Set working directory
WORKDIR /app

# Copy Cargo files for dependency caching
COPY Cargo.toml Cargo.lock ./
COPY crates/aion-core/Cargo.toml ./crates/aion-core/
COPY crates/aion-ai-engine/Cargo.toml ./crates/aion-ai-engine/
COPY crates/aion-monitoring/Cargo.toml ./crates/aion-monitoring/
COPY crates/aion-web-api/Cargo.toml ./crates/aion-web-api/

# Create dummy source files to cache dependencies
RUN mkdir -p crates/aion-core/src && \
    mkdir -p crates/aion-ai-engine/src && \
    mkdir -p crates/aion-monitoring/src && \
    mkdir -p crates/aion-web-api/src && \
    echo "fn main() {}" > crates/aion-core/src/lib.rs && \
    echo "fn main() {}" > crates/aion-ai-engine/src/lib.rs && \
    echo "fn main() {}" > crates/aion-monitoring/src/lib.rs && \
    echo "fn main() {}" > crates/aion-web-api/src/main.rs

# Build dependencies (this layer will be cached)
RUN cargo build --release && \
    rm -rf crates/*/src

# Copy actual source code
COPY crates ./crates

# Build the actual application
RUN cargo build --release --bin aion-web-api

# Verify the binary was built
RUN ls -la target/release/ && \
    file target/release/aion-web-api

# Runtime stage
FROM alpine:3.19 AS runtime

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    dumb-init \
    curl

# Create app user
RUN addgroup -g 1000 ectus && \
    adduser -D -s /bin/sh -u 1000 -G ectus ectus

# Create necessary directories
RUN mkdir -p /app/data /app/logs /app/models /app/config && \
    chown -R ectus:ectus /app

# Copy binary from builder stage
COPY --from=builder --chown=ectus:ectus /app/target/release/aion-web-api /app/

# Copy configuration files
COPY --chown=ectus:ectus config/ /app/config/
COPY --chown=ectus:ectus scripts/health-check.sh /app/health-check.sh

# Make scripts executable
RUN chmod +x /app/aion-web-api /app/health-check.sh

# Switch to non-root user
USER ectus

# Set working directory
WORKDIR /app

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/health-check.sh || exit 1

# Set environment variables
ENV RUST_LOG=info
ENV RUST_BACKTRACE=1
ENV ECTUS_CONFIG_PATH=/app/config/production.toml

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start the application
CMD ["./aion-web-api"]