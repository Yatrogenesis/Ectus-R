{"version":3,"file":"api-client-D-NQVLVt.js","sources":["../../src/lib/api-client.ts"],"sourcesContent":["// AION-R API Client: Complete TypeScript client for backend integration\r\n// Connects React frontend with Rust Axum backend\r\n\r\nimport { Project, CreateProjectRequest, ProjectFilters } from '../hooks/useProjects'\r\n\r\nexport interface APIClientConfig {\r\n  baseUrl: string\r\n  apiKey?: string\r\n  timeout?: number\r\n}\r\n\r\nexport interface APIResponse<T> {\r\n  data?: T\r\n  error?: string\r\n  status: number\r\n}\r\n\r\nexport interface DeploymentResult {\r\n  deploymentUrl: string\r\n  deploymentId: string\r\n  status: 'deploying' | 'success' | 'failed'\r\n}\r\n\r\nexport interface ProjectAnalysisResult {\r\n  technicalDebtScore: number\r\n  codeQualityScore: number\r\n  securityScore: number\r\n  performanceScore: number\r\n  recommendations: string[]\r\n}\r\n\r\nexport interface GeneratedCode {\r\n  language: string\r\n  framework: string\r\n  code: string\r\n  files: { path: string; content: string }[]\r\n  tests: { path: string; content: string }[]\r\n}\r\n\r\nexport interface QAResult {\r\n  success: boolean\r\n  testsRun: number\r\n  testsPassed: number\r\n  testsFailed: number\r\n  failures: TestFailure[]\r\n  autocorrectionAttempts: number\r\n}\r\n\r\nexport interface TestFailure {\r\n  testName: string\r\n  failureMessage: string\r\n  filePath?: string\r\n  lineNumber?: number\r\n}\r\n\r\nexport interface RefactoringOperation {\r\n  operationType: 'extract_method' | 'inline_method' | 'rename' | 'replace_magic_number'\r\n  targetFile: string\r\n  parameters: Record<string, any>\r\n}\r\n\r\nexport interface RefactoringResult {\r\n  success: boolean\r\n  changesApplied: string[]\r\n  testsGenerated: number\r\n  testsPassed: boolean\r\n}\r\n\r\n/**\r\n * Complete API client for AION-R backend\r\n *\r\n * Features:\r\n * - Type-safe requests and responses\r\n * - Automatic retry with exponential backoff\r\n * - Request timeout handling\r\n * - Error normalization\r\n * - Authentication token management\r\n * - WebSocket support for real-time updates\r\n */\r\nexport class APIClient {\r\n  private baseUrl: string\r\n  private apiKey?: string\r\n  private timeout: number\r\n  private ws?: WebSocket\r\n\r\n  constructor(config: APIClientConfig) {\r\n    // Priority: config > env > Cloudflare production > local fallback\r\n    this.baseUrl = config.baseUrl\r\n      || process.env.REACT_APP_API_URL\r\n      || 'https://ectus-r-saas.pako-molina.workers.dev'  // Cloudflare Worker\r\n      || 'http://localhost:8080'  // Local dev fallback\r\n    this.apiKey = config.apiKey || process.env.REACT_APP_API_KEY\r\n    this.timeout = config.timeout || 30000\r\n\r\n    console.log(`[APIClient] Initialized with baseUrl: ${this.baseUrl}`)\r\n  }\r\n\r\n  /**\r\n   * Generic request method with retry logic\r\n   */\r\n  private async request<T>(\r\n    endpoint: string,\r\n    options: RequestInit = {},\r\n    retries = 3\r\n  ): Promise<APIResponse<T>> {\r\n    const url = `${this.baseUrl}${endpoint}`\r\n\r\n    const headers: HeadersInit = {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    }\r\n\r\n    if (this.apiKey) {\r\n      headers['Authorization'] = `Bearer ${this.apiKey}`\r\n    }\r\n\r\n    const controller = new AbortController()\r\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout)\r\n\r\n    try {\r\n      const response = await fetch(url, {\r\n        ...options,\r\n        headers,\r\n        signal: controller.signal,\r\n      })\r\n\r\n      clearTimeout(timeoutId)\r\n\r\n      const status = response.status\r\n\r\n      if (!response.ok) {\r\n        // Handle HTTP errors\r\n        const errorText = await response.text()\r\n        return {\r\n          error: `HTTP ${status}: ${errorText}`,\r\n          status,\r\n        }\r\n      }\r\n\r\n      const data = await response.json()\r\n\r\n      return {\r\n        data,\r\n        status,\r\n      }\r\n    } catch (error) {\r\n      clearTimeout(timeoutId)\r\n\r\n      // Retry on network errors\r\n      if (retries > 0 && error instanceof Error && error.name !== 'AbortError') {\r\n        await this.delay(Math.pow(2, 3 - retries) * 1000)\r\n        return this.request<T>(endpoint, options, retries - 1)\r\n      }\r\n\r\n      return {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        status: 0,\r\n      }\r\n    }\r\n  }\r\n\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n  }\r\n\r\n  // ===== GENERIC HTTP METHODS =====\r\n\r\n  /**\r\n   * Generic GET request\r\n   */\r\n  async get<T>(endpoint: string): Promise<T> {\r\n    const response = await this.request<T>(endpoint, { method: 'GET' })\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    if (!response.data) {\r\n      throw new Error('No data received')\r\n    }\r\n\r\n    return response.data\r\n  }\r\n\r\n  /**\r\n   * Generic POST request\r\n   */\r\n  async post<T>(endpoint: string, body?: any): Promise<T> {\r\n    const response = await this.request<T>(endpoint, {\r\n      method: 'POST',\r\n      body: body ? JSON.stringify(body) : undefined,\r\n    })\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    if (!response.data) {\r\n      throw new Error('No data received')\r\n    }\r\n\r\n    return response.data\r\n  }\r\n\r\n  /**\r\n   * Generic PUT request\r\n   */\r\n  async put<T>(endpoint: string, body?: any): Promise<T> {\r\n    const response = await this.request<T>(endpoint, {\r\n      method: 'PUT',\r\n      body: body ? JSON.stringify(body) : undefined,\r\n    })\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    if (!response.data) {\r\n      throw new Error('No data received')\r\n    }\r\n\r\n    return response.data\r\n  }\r\n\r\n  /**\r\n   * Generic DELETE request\r\n   */\r\n  async delete<T>(endpoint: string): Promise<T> {\r\n    const response = await this.request<T>(endpoint, { method: 'DELETE' })\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    if (!response.data) {\r\n      throw new Error('No data received')\r\n    }\r\n\r\n    return response.data\r\n  }\r\n\r\n  /**\r\n   * Generic PATCH request\r\n   */\r\n  async patch<T>(endpoint: string, body?: any): Promise<T> {\r\n    const response = await this.request<T>(endpoint, {\r\n      method: 'PATCH',\r\n      body: body ? JSON.stringify(body) : undefined,\r\n    })\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    if (!response.data) {\r\n      throw new Error('No data received')\r\n    }\r\n\r\n    return response.data\r\n  }\r\n\r\n  // ===== PROJECT MANAGEMENT =====\r\n\r\n  /**\r\n   * Get all projects with optional filtering\r\n   */\r\n  async getProjects(filters?: ProjectFilters): Promise<Project[]> {\r\n    const params = new URLSearchParams()\r\n\r\n    if (filters?.search) {\r\n      params.append('search', filters.search)\r\n    }\r\n    if (filters?.status) {\r\n      params.append('status', filters.status)\r\n    }\r\n    if (filters?.environment) {\r\n      params.append('environment', filters.environment)\r\n    }\r\n    if (filters?.tags && filters.tags.length > 0) {\r\n      params.append('tags', filters.tags.join(','))\r\n    }\r\n\r\n    const queryString = params.toString()\r\n    const endpoint = `/api/projects${queryString ? `?${queryString}` : ''}`\r\n\r\n    const response = await this.request<Project[]>(endpoint)\r\n\r\n    if (response.error) {\r\n      console.error('Failed to fetch projects:', response.error)\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    return response.data || []\r\n  }\r\n\r\n  /**\r\n   * Get a single project by ID\r\n   */\r\n  async getProject(id: string): Promise<Project> {\r\n    const response = await this.request<Project>(`/api/projects/${id}`)\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    if (!response.data) {\r\n      throw new Error('Project not found')\r\n    }\r\n\r\n    return response.data\r\n  }\r\n\r\n  /**\r\n   * Create a new project\r\n   */\r\n  async createProject(project: CreateProjectRequest): Promise<Project> {\r\n    const response = await this.request<Project>('/api/projects', {\r\n      method: 'POST',\r\n      body: JSON.stringify(project),\r\n    })\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    if (!response.data) {\r\n      throw new Error('Failed to create project')\r\n    }\r\n\r\n    return response.data\r\n  }\r\n\r\n  /**\r\n   * Update an existing project\r\n   */\r\n  async updateProject(id: string, updates: Partial<Project>): Promise<Project> {\r\n    const response = await this.request<Project>(`/api/projects/${id}`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify(updates),\r\n    })\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    if (!response.data) {\r\n      throw new Error('Failed to update project')\r\n    }\r\n\r\n    return response.data\r\n  }\r\n\r\n  /**\r\n   * Delete a project\r\n   */\r\n  async deleteProject(id: string): Promise<void> {\r\n    const response = await this.request<void>(`/api/projects/${id}`, {\r\n      method: 'DELETE',\r\n    })\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n  }\r\n\r\n  // ===== DEPLOYMENT =====\r\n\r\n  /**\r\n   * Deploy a project to an environment\r\n   */\r\n  async deployProject(id: string, environment: string): Promise<DeploymentResult> {\r\n    const response = await this.request<DeploymentResult>(`/api/projects/${id}/deploy`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ environment }),\r\n    })\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    if (!response.data) {\r\n      throw new Error('Deployment failed')\r\n    }\r\n\r\n    return response.data\r\n  }\r\n\r\n  /**\r\n   * Get deployment logs for a project\r\n   */\r\n  async getProjectLogs(id: string, limit = 100): Promise<string[]> {\r\n    const response = await this.request<{ logs: string[] }>(\r\n      `/api/projects/${id}/logs?limit=${limit}`\r\n    )\r\n\r\n    if (response.error) {\r\n      console.warn('Failed to fetch logs:', response.error)\r\n      return []\r\n    }\r\n\r\n    return response.data?.logs || []\r\n  }\r\n\r\n  // ===== AI CODE GENERATION =====\r\n\r\n  /**\r\n   * Generate code from requirements using AI\r\n   */\r\n  async generateCode(requirements: string, language: string, framework?: string): Promise<GeneratedCode> {\r\n    const response = await this.request<GeneratedCode>('/api/ai/generate', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ requirements, language, framework }),\r\n    })\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    if (!response.data) {\r\n      throw new Error('Code generation failed')\r\n    }\r\n\r\n    return response.data\r\n  }\r\n\r\n  // ===== AUTONOMOUS QA =====\r\n\r\n  /**\r\n   * Run autonomous QA on a project\r\n   */\r\n  async runQA(projectId: string): Promise<QAResult> {\r\n    const response = await this.request<QAResult>(`/api/projects/${projectId}/qa`, {\r\n      method: 'POST',\r\n    })\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    if (!response.data) {\r\n      throw new Error('QA execution failed')\r\n    }\r\n\r\n    return response.data\r\n  }\r\n\r\n  // ===== REFACTORING =====\r\n\r\n  /**\r\n   * Apply refactoring operation to code\r\n   */\r\n  async applyRefactoring(projectId: string, operation: RefactoringOperation): Promise<RefactoringResult> {\r\n    const response = await this.request<RefactoringResult>(`/api/projects/${projectId}/refactor`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(operation),\r\n    })\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    if (!response.data) {\r\n      throw new Error('Refactoring failed')\r\n    }\r\n\r\n    return response.data\r\n  }\r\n\r\n  /**\r\n   * Analyze project code for refactoring opportunities\r\n   */\r\n  async analyzeProject(projectId: string): Promise<ProjectAnalysisResult> {\r\n    const response = await this.request<ProjectAnalysisResult>(`/api/projects/${projectId}/analyze`, {\r\n      method: 'POST',\r\n    })\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    if (!response.data) {\r\n      throw new Error('Analysis failed')\r\n    }\r\n\r\n    return response.data\r\n  }\r\n\r\n  // ===== WEBSOCKET FOR REAL-TIME UPDATES =====\r\n\r\n  /**\r\n   * Connect to WebSocket for real-time project updates\r\n   */\r\n  connectWebSocket(onMessage: (event: MessageEvent) => void, onError?: (error: Event) => void): void {\r\n    const wsUrl = this.baseUrl.replace(/^http/, 'ws') + '/ws'\r\n\r\n    this.ws = new WebSocket(wsUrl)\r\n\r\n    this.ws.onopen = () => {\r\n      console.log('✅ WebSocket connected')\r\n\r\n      // Send authentication if API key exists\r\n      if (this.apiKey) {\r\n        this.ws?.send(JSON.stringify({ type: 'auth', token: this.apiKey }))\r\n      }\r\n    }\r\n\r\n    this.ws.onmessage = onMessage\r\n\r\n    this.ws.onerror = (error) => {\r\n      console.error('❌ WebSocket error:', error)\r\n      if (onError) {\r\n        onError(error)\r\n      }\r\n    }\r\n\r\n    this.ws.onclose = () => {\r\n      console.log('🔌 WebSocket disconnected')\r\n\r\n      // Attempt reconnection after 5 seconds\r\n      setTimeout(() => {\r\n        console.log('🔄 Attempting WebSocket reconnection...')\r\n        this.connectWebSocket(onMessage, onError)\r\n      }, 5000)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send message through WebSocket\r\n   */\r\n  sendWebSocketMessage(message: any): void {\r\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n      this.ws.send(JSON.stringify(message))\r\n    } else {\r\n      console.warn('⚠️  WebSocket not connected')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect WebSocket\r\n   */\r\n  disconnectWebSocket(): void {\r\n    if (this.ws) {\r\n      this.ws.close()\r\n      this.ws = undefined\r\n    }\r\n  }\r\n\r\n  // ===== ANALYTICS =====\r\n\r\n  /**\r\n   * Get project analytics\r\n   */\r\n  async getAnalytics(projectId: string, timeRange: '24h' | '7d' | '30d' = '7d'): Promise<any> {\r\n    const response = await this.request(`/api/analytics/${projectId}?range=${timeRange}`)\r\n\r\n    if (response.error) {\r\n      throw new Error(response.error)\r\n    }\r\n\r\n    return response.data\r\n  }\r\n\r\n  // ===== HEALTH CHECK =====\r\n\r\n  /**\r\n   * Check if backend is healthy\r\n   */\r\n  async healthCheck(): Promise<boolean> {\r\n    try {\r\n      const response = await this.request('/health', {}, 0) // No retries for health check\r\n      return response.status === 200\r\n    } catch {\r\n      return false\r\n    }\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nlet apiClientInstance: APIClient | null = null\r\n\r\n/**\r\n * Get or create API client instance\r\n */\r\nexport function getAPIClient(config?: APIClientConfig): APIClient {\r\n  if (!apiClientInstance) {\r\n    apiClientInstance = new APIClient(config || {\r\n      baseUrl: process.env.REACT_APP_API_URL || 'http://localhost:8080',\r\n      apiKey: process.env.REACT_APP_API_KEY,\r\n    })\r\n  }\r\n  return apiClientInstance\r\n}\r\n\r\n/**\r\n * Reset API client (useful for testing)\r\n */\r\nexport function resetAPIClient(): void {\r\n  apiClientInstance = null\r\n}\r\n\r\nexport default APIClient\r\n"],"names":["APIClient","config","__publicField","define_process_env_default","endpoint","options","retries","url","headers","controller","timeoutId","response","status","errorText","error","ms","resolve","body","filters","params","queryString","id","project","updates","environment","limit","_a","requirements","language","framework","projectId","operation","onMessage","onError","wsUrl","message","timeRange","apiClientInstance","getAPIClient"],"mappings":"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"}