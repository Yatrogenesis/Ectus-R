// Build script for creating cross-platform installers
// Generates self-contained executables for Windows, macOS, and Linux

use std::env;
use std::fs;
use std::path::Path;
use std::process::Command;
use anyhow::{Result, Context};

fn main() -> Result<()> {
    println!("🚀 Building Ectus-R Installers");

    let version = env::var("CARGO_PKG_VERSION")
        .unwrap_or_else(|_| "1.0.0".to_string());

    let target_os = env::var("TARGET_OS")
        .unwrap_or_else(|_| current_os());

    println!("Building for: {} v{}", target_os, version);

    match target_os.as_str() {
        "windows" => build_windows_installer(&version)?,
        "macos" => build_macos_installer(&version)?,
        "linux" => build_linux_installer(&version)?,
        _ => {
            println!("Building for all platforms...");
            build_windows_installer(&version)?;
            build_macos_installer(&version)?;
            build_linux_installer(&version)?;
        }
    }

    println!("✅ All installers built successfully!");
    Ok(())
}

fn build_windows_installer(version: &str) -> Result<()> {
    println!("🪟 Building Windows installer...");

    // Build the release binaries
    build_release_binary("x86_64-pc-windows-msvc")?;

    // Create installer directory structure
    let installer_dir = Path::new("target/installer/windows");
    fs::create_dir_all(installer_dir)?;

    // Copy binaries
    copy_binary("target/x86_64-pc-windows-msvc/release/ectus-server.exe",
               &installer_dir.join("ectus-server.exe"))?;
    copy_binary("target/x86_64-pc-windows-msvc/release/ectus-cli.exe",
               &installer_dir.join("ectus-cli.exe"))?;

    // Create NSIS installer script
    create_nsis_script(version, installer_dir)?;

    // Build installer if NSIS is available
    if Command::new("makensis").arg("--version").output().is_ok() {
        Command::new("makensis")
            .arg(installer_dir.join("installer.nsi"))
            .output()
            .context("Failed to build NSIS installer")?;

        println!("✅ Windows NSIS installer created");
    } else {
        println!("⚠️  NSIS not found, creating portable ZIP");
        create_windows_portable_zip(version, installer_dir)?;
    }

    // Create MSI installer using WiX (if available)
    create_wix_installer(version, installer_dir)?;

    Ok(())
}

fn build_macos_installer(version: &str) -> Result<()> {
    println!("🍎 Building macOS installer...");

    // Build for both Intel and Apple Silicon
    build_release_binary("x86_64-apple-darwin")?;
    build_release_binary("aarch64-apple-darwin")?;

    // Create universal binaries
    create_universal_binary("ectus-server")?;
    create_universal_binary("ectus-cli")?;

    let installer_dir = Path::new("target/installer/macos");
    fs::create_dir_all(installer_dir)?;

    // Create .app bundle
    create_app_bundle(version, installer_dir)?;

    // Create PKG installer
    create_pkg_installer(version, installer_dir)?;

    // Create DMG
    create_dmg_installer(version, installer_dir)?;

    Ok(())
}

fn build_linux_installer(version: &str) -> Result<()> {
    println!("🐧 Building Linux installer...");

    // Build for x86_64
    build_release_binary("x86_64-unknown-linux-gnu")?;

    let installer_dir = Path::new("target/installer/linux");
    fs::create_dir_all(installer_dir)?;

    // Copy binaries
    copy_binary("target/x86_64-unknown-linux-gnu/release/ectus-server",
               &installer_dir.join("ectus-server"))?;
    copy_binary("target/x86_64-unknown-linux-gnu/release/ectus-cli",
               &installer_dir.join("ectus-cli"))?;

    // Create DEB package
    create_deb_package(version, installer_dir)?;

    // Create RPM package
    create_rpm_package(version, installer_dir)?;

    // Create AppImage
    create_appimage(version, installer_dir)?;

    // Create portable tar.gz
    create_portable_tarball(version, installer_dir)?;

    Ok(())
}

fn build_release_binary(target: &str) -> Result<()> {
    println!("🔨 Building release binary for {}", target);

    let output = Command::new("cargo")
        .args(&["build", "--release", "--target", target])
        .output()
        .context("Failed to build release binary")?;

    if !output.status.success() {
        let error = String::from_utf8_lossy(&output.stderr);
        return Err(anyhow::anyhow!("Build failed for {}: {}", target, error));
    }

    Ok(())
}

fn copy_binary(src: &str, dst: &Path) -> Result<()> {
    fs::copy(src, dst)
        .with_context(|| format!("Failed to copy {} to {}", src, dst.display()))?;
    Ok(())
}

fn create_nsis_script(version: &str, installer_dir: &Path) -> Result<()> {
    let script_content = format!(r#"
; Ectus-R Windows Installer
; Generated by build script

!define PRODUCT_NAME "Ectus-R"
!define PRODUCT_VERSION "{}"
!define PRODUCT_PUBLISHER "Yatrogenesis"
!define PRODUCT_WEB_SITE "https://ectus.ai"
!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\ectus-server.exe"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${{PRODUCT_NAME}}"

SetCompressor lzma

; Modern UI
!include "MUI2.nsh"

; General
Name "${{PRODUCT_NAME}} ${{PRODUCT_VERSION}}"
OutFile "ectus-r-${{PRODUCT_VERSION}}-windows-x64-installer.exe"
InstallDir "$PROGRAMFILES64\Ectus-R"
InstallDirRegKey HKLM "${{PRODUCT_DIR_REGKEY}}" ""
ShowInstDetails show
ShowUnInstDetails show

; Interface Settings
!define MUI_ABORTWARNING
!define MUI_ICON "assets\icon.ico"
!define MUI_UNICON "assets\icon.ico"

; Pages
!insertmacro MUI_PAGE_LICENSE "LICENSE"
!insertmacro MUI_PAGE_COMPONENTS
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH

!insertmacro MUI_UNPAGE_INSTFILES

; Languages
!insertmacro MUI_LANGUAGE "English"

; Reserve Files
!insertmacro MUI_RESERVEFILE_LANGDLL

Section "Ectus-R Core" SEC01
  SectionIn RO
  SetOutPath "$INSTDIR"
  File "ectus-server.exe"
  File "ectus-cli.exe"

  ; Create shortcuts
  CreateDirectory "$SMPROGRAMS\Ectus-R"
  CreateShortCut "$SMPROGRAMS\Ectus-R\Ectus-R Server.lnk" "$INSTDIR\ectus-server.exe"
  CreateShortCut "$SMPROGRAMS\Ectus-R\Ectus-R CLI.lnk" "$INSTDIR\ectus-cli.exe"
  CreateShortCut "$DESKTOP\Ectus-R.lnk" "$INSTDIR\ectus-server.exe"

  ; Add to PATH
  EnVar::SetHKLM
  EnVar::AddValue "PATH" "$INSTDIR"
SectionEnd

Section "Windows Service" SEC02
  ExecWait '"$INSTDIR\ectus-server.exe" install-service'
SectionEnd

Section -AdditionalIcons
  WriteIniStr "$INSTDIR\${{PRODUCT_NAME}}.url" "InternetShortcut" "URL" "${{PRODUCT_WEB_SITE}}"
  CreateShortCut "$SMPROGRAMS\Ectus-R\Website.lnk" "$INSTDIR\${{PRODUCT_NAME}}.url"
  CreateShortCut "$SMPROGRAMS\Ectus-R\Uninstall.lnk" "$INSTDIR\uninst.exe"
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr HKLM "${{PRODUCT_DIR_REGKEY}}" "" "$INSTDIR\ectus-server.exe"
  WriteRegStr HKLM "${{PRODUCT_UNINST_KEY}}" "DisplayName" "${{PRODUCT_NAME}}"
  WriteRegStr HKLM "${{PRODUCT_UNINST_KEY}}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr HKLM "${{PRODUCT_UNINST_KEY}}" "DisplayIcon" "$INSTDIR\ectus-server.exe"
  WriteRegStr HKLM "${{PRODUCT_UNINST_KEY}}" "DisplayVersion" "${{PRODUCT_VERSION}}"
  WriteRegStr HKLM "${{PRODUCT_UNINST_KEY}}" "URLInfoAbout" "${{PRODUCT_WEB_SITE}}"
  WriteRegStr HKLM "${{PRODUCT_UNINST_KEY}}" "Publisher" "${{PRODUCT_PUBLISHER}}"
SectionEnd

; Component descriptions
!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
  !insertmacro MUI_DESCRIPTION_TEXT ${{SEC01}} "Core Ectus-R application files"
  !insertmacro MUI_DESCRIPTION_TEXT ${{SEC02}} "Install Ectus-R as a Windows Service"
!insertmacro MUI_FUNCTION_DESCRIPTION_END

Section Uninstall
  Delete "$INSTDIR\${{PRODUCT_NAME}}.url"
  Delete "$INSTDIR\uninst.exe"
  Delete "$INSTDIR\ectus-server.exe"
  Delete "$INSTDIR\ectus-cli.exe"

  Delete "$SMPROGRAMS\Ectus-R\Uninstall.lnk"
  Delete "$SMPROGRAMS\Ectus-R\Website.lnk"
  Delete "$SMPROGRAMS\Ectus-R\Ectus-R Server.lnk"
  Delete "$SMPROGRAMS\Ectus-R\Ectus-R CLI.lnk"
  Delete "$DESKTOP\Ectus-R.lnk"

  RMDir "$SMPROGRAMS\Ectus-R"
  RMDir "$INSTDIR"

  DeleteRegKey HKLM "${{PRODUCT_UNINST_KEY}}"
  DeleteRegKey HKLM "${{PRODUCT_DIR_REGKEY}}"

  ; Remove from PATH
  EnVar::SetHKLM
  EnVar::DeleteValue "PATH" "$INSTDIR"

  SetAutoClose true
SectionEnd
"#, version);

    fs::write(installer_dir.join("installer.nsi"), script_content)?;
    Ok(())
}

fn create_windows_portable_zip(version: &str, installer_dir: &Path) -> Result<()> {
    println!("📦 Creating Windows portable ZIP");

    // Create portable structure
    let portable_dir = installer_dir.join("portable");
    fs::create_dir_all(&portable_dir)?;

    // Copy binaries
    fs::copy(installer_dir.join("ectus-server.exe"), portable_dir.join("ectus-server.exe"))?;
    fs::copy(installer_dir.join("ectus-cli.exe"), portable_dir.join("ectus-cli.exe"))?;

    // Create batch files for easy execution
    let start_server_bat = r#"@echo off
echo Starting Ectus-R Server...
ectus-server.exe
pause"#;

    fs::write(portable_dir.join("start-server.bat"), start_server_bat)?;

    let readme = format!(r#"# Ectus-R Portable v{}

## Quick Start
1. Double-click `start-server.bat` to start the server
2. Open your browser to http://localhost:8080
3. Use `ectus-cli.exe` for command-line operations

## Requirements
- Windows 10 or later
- No installation required

## Support
Visit https://ectus.ai for documentation and support.
"#, version);

    fs::write(portable_dir.join("README.txt"), readme)?;

    // Create ZIP using PowerShell (if 7-zip not available)
    Command::new("powershell")
        .args(&[
            "-Command",
            &format!("Compress-Archive -Path '{}\\*' -DestinationPath 'ectus-r-{}-windows-x64-portable.zip'",
                     portable_dir.display(), version)
        ])
        .current_dir(installer_dir)
        .output()?;

    Ok(())
}

fn create_wix_installer(version: &str, installer_dir: &Path) -> Result<()> {
    // Check if WiX is available
    if Command::new("candle").arg("--help").output().is_err() {
        println!("⚠️  WiX Toolset not found, skipping MSI creation");
        return Ok(());
    }

    println!("🔥 Creating MSI installer with WiX");

    let wxs_content = format!(r#"<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product Id="*"
           Name="Ectus-R"
           Language="1033"
           Version="{}"
           Manufacturer="Yatrogenesis"
           UpgradeCode="12345678-1234-1234-1234-123456789012">

    <Package InstallerVersion="200" Compressed="yes" InstallScope="perMachine" />

    <MajorUpgrade DowngradeErrorMessage="A newer version of Ectus-R is already installed." />

    <MediaTemplate EmbedCab="yes" />

    <Feature Id="ProductFeature" Title="Ectus-R" Level="1">
      <ComponentGroupRef Id="ProductComponents" />
    </Feature>
  </Product>

  <Fragment>
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFiles64Folder">
        <Directory Id="INSTALLFOLDER" Name="Ectus-R" />
      </Directory>
    </Directory>
  </Fragment>

  <Fragment>
    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
      <Component Id="EctusServer" Guid="*">
        <File Id="EctusServerExe" Source="ectus-server.exe" KeyPath="yes" />
      </Component>
      <Component Id="EctusCli" Guid="*">
        <File Id="EctusCliExe" Source="ectus-cli.exe" KeyPath="yes" />
      </Component>
    </ComponentGroup>
  </Fragment>
</Wix>"#, version);

    let wxs_file = installer_dir.join("installer.wxs");
    fs::write(&wxs_file, wxs_content)?;

    // Build MSI
    Command::new("candle")
        .args(&["-out", "installer.wixobj", "installer.wxs"])
        .current_dir(installer_dir)
        .output()?;

    Command::new("light")
        .args(&["-out", &format!("ectus-r-{}-windows-x64.msi", version), "installer.wixobj"])
        .current_dir(installer_dir)
        .output()?;

    println!("✅ MSI installer created");
    Ok(())
}

fn create_universal_binary(binary_name: &str) -> Result<()> {
    println!("🔄 Creating universal binary for {}", binary_name);

    Command::new("lipo")
        .args(&[
            "-create",
            &format!("target/x86_64-apple-darwin/release/{}", binary_name),
            &format!("target/aarch64-apple-darwin/release/{}", binary_name),
            "-output",
            &format!("target/universal/{}", binary_name)
        ])
        .output()
        .context("Failed to create universal binary")?;

    Ok(())
}

fn create_app_bundle(version: &str, installer_dir: &Path) -> Result<()> {
    println!("📱 Creating .app bundle");

    let app_dir = installer_dir.join("Ectus-R.app");
    let contents_dir = app_dir.join("Contents");
    let macos_dir = contents_dir.join("MacOS");
    let resources_dir = contents_dir.join("Resources");

    fs::create_dir_all(&macos_dir)?;
    fs::create_dir_all(&resources_dir)?;

    // Copy binaries
    fs::copy("target/universal/ectus-server", macos_dir.join("ectus-server"))?;
    fs::copy("target/universal/ectus-cli", macos_dir.join("ectus-cli"))?;

    // Create Info.plist
    let info_plist = format!(r#"<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleExecutable</key>
    <string>ectus-server</string>
    <key>CFBundleIdentifier</key>
    <string>ai.ectus.server</string>
    <key>CFBundleName</key>
    <string>Ectus-R</string>
    <key>CFBundleVersion</key>
    <string>{}</string>
    <key>CFBundleShortVersionString</key>
    <string>{}</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>LSMinimumSystemVersion</key>
    <string>10.15</string>
</dict>
</plist>"#, version, version);

    fs::write(contents_dir.join("Info.plist"), info_plist)?;

    Ok(())
}

fn create_pkg_installer(version: &str, installer_dir: &Path) -> Result<()> {
    println!("📦 Creating PKG installer");

    Command::new("pkgbuild")
        .args(&[
            "--root", "Ectus-R.app",
            "--identifier", "ai.ectus.server",
            "--version", version,
            &format!("ectus-r-{}-macos.pkg", version)
        ])
        .current_dir(installer_dir)
        .output()
        .context("Failed to create PKG installer")?;

    Ok(())
}

fn create_dmg_installer(version: &str, installer_dir: &Path) -> Result<()> {
    println!("💿 Creating DMG installer");

    let dmg_name = format!("ectus-r-{}-macos.dmg", version);

    Command::new("hdiutil")
        .args(&[
            "create",
            "-volname", "Ectus-R",
            "-srcfolder", "Ectus-R.app",
            "-ov",
            "-format", "UDZO",
            &dmg_name
        ])
        .current_dir(installer_dir)
        .output()
        .context("Failed to create DMG")?;

    Ok(())
}

fn create_deb_package(version: &str, installer_dir: &Path) -> Result<()> {
    println!("📦 Creating DEB package");

    let package_dir = installer_dir.join("deb-package");
    let usr_bin = package_dir.join("usr/local/bin");
    let debian_dir = package_dir.join("DEBIAN");

    fs::create_dir_all(&usr_bin)?;
    fs::create_dir_all(&debian_dir)?;

    // Copy binaries
    fs::copy(installer_dir.join("ectus-server"), usr_bin.join("ectus-server"))?;
    fs::copy(installer_dir.join("ectus-cli"), usr_bin.join("ectus-cli"))?;

    // Create control file
    let control = format!(r#"Package: ectus-r
Version: {}
Section: development
Priority: optional
Architecture: amd64
Maintainer: Yatrogenesis <info@yatrogenesis.com>
Description: Autonomous Software Engineering Platform
 Ectus-R is an AI-powered platform that generates complete applications
 from natural language descriptions.
Homepage: https://ectus.ai
"#, version);

    fs::write(debian_dir.join("control"), control)?;

    // Build DEB package
    Command::new("dpkg-deb")
        .args(&["--build", "deb-package", &format!("ectus-r-{}-linux-amd64.deb", version)])
        .current_dir(installer_dir)
        .output()
        .context("Failed to create DEB package")?;

    Ok(())
}

fn create_rpm_package(version: &str, installer_dir: &Path) -> Result<()> {
    // Check if rpmbuild is available
    if Command::new("rpmbuild").arg("--version").output().is_err() {
        println!("⚠️  rpmbuild not found, skipping RPM creation");
        return Ok(());
    }

    println!("📦 Creating RPM package");

    let spec_content = format!(r#"Name: ectus-r
Version: {}
Release: 1
Summary: Autonomous Software Engineering Platform
License: MIT
URL: https://ectus.ai
BuildArch: x86_64

%description
Ectus-R is an AI-powered platform that generates complete applications
from natural language descriptions.

%install
mkdir -p %{{buildroot}}/usr/local/bin
cp %{{_sourcedir}}/ectus-server %{{buildroot}}/usr/local/bin/
cp %{{_sourcedir}}/ectus-cli %{{buildroot}}/usr/local/bin/

%files
/usr/local/bin/ectus-server
/usr/local/bin/ectus-cli

%changelog
* Wed Jan 01 2025 Yatrogenesis <info@yatrogenesis.com> - {}
- Initial release
"#, version, version);

    let rpmbuild_dir = installer_dir.join("rpmbuild");
    let specs_dir = rpmbuild_dir.join("SPECS");
    let sources_dir = rpmbuild_dir.join("SOURCES");

    fs::create_dir_all(&specs_dir)?;
    fs::create_dir_all(&sources_dir)?;

    fs::write(specs_dir.join("ectus-r.spec"), spec_content)?;
    fs::copy(installer_dir.join("ectus-server"), sources_dir.join("ectus-server"))?;
    fs::copy(installer_dir.join("ectus-cli"), sources_dir.join("ectus-cli"))?;

    Command::new("rpmbuild")
        .args(&[
            "-bb",
            "--define", &format!("_topdir {}", rpmbuild_dir.display()),
            "SPECS/ectus-r.spec"
        ])
        .current_dir(&rpmbuild_dir)
        .output()
        .context("Failed to create RPM package")?;

    Ok(())
}

fn create_appimage(version: &str, installer_dir: &Path) -> Result<()> {
    println!("🖼️  Creating AppImage");

    let appdir = installer_dir.join("Ectus-R.AppDir");
    let usr_bin = appdir.join("usr/bin");

    fs::create_dir_all(&usr_bin)?;

    // Copy binaries
    fs::copy(installer_dir.join("ectus-server"), usr_bin.join("ectus-server"))?;
    fs::copy(installer_dir.join("ectus-cli"), usr_bin.join("ectus-cli"))?;

    // Create AppRun
    let apprun = r#"#!/bin/bash
SELF=$(readlink -f "$0")
HERE=${SELF%/*}
export PATH="${HERE}/usr/bin/:${PATH}"
exec "${HERE}/usr/bin/ectus-server" "$@"
"#;

    fs::write(appdir.join("AppRun"), apprun)?;

    // Make AppRun executable
    Command::new("chmod")
        .args(&["+x", "AppRun"])
        .current_dir(&appdir)
        .output()?;

    // Create .desktop file
    let desktop = format!(r#"[Desktop Entry]
Name=Ectus-R
Exec=ectus-server
Icon=ectus-r
Type=Application
Categories=Development;
Comment=Autonomous Software Engineering Platform
Version={}
"#, version);

    fs::write(appdir.join("ectus-r.desktop"), desktop)?;

    // Download appimagetool if available and build AppImage
    if let Ok(_) = Command::new("appimagetool").arg("--version").output() {
        Command::new("appimagetool")
            .args(&["Ectus-R.AppDir", &format!("ectus-r-{}-linux-x86_64.AppImage", version)])
            .current_dir(installer_dir)
            .output()
            .context("Failed to create AppImage")?;
    }

    Ok(())
}

fn create_portable_tarball(version: &str, installer_dir: &Path) -> Result<()> {
    println!("📦 Creating portable tarball");

    let portable_dir = installer_dir.join("ectus-r-portable");
    fs::create_dir_all(&portable_dir)?;

    // Copy binaries
    fs::copy(installer_dir.join("ectus-server"), portable_dir.join("ectus-server"))?;
    fs::copy(installer_dir.join("ectus-cli"), portable_dir.join("ectus-cli"))?;

    // Create install script
    let install_script = r#"#!/bin/bash
set -e

echo "Installing Ectus-R..."

# Copy to /usr/local/bin
sudo cp ectus-server /usr/local/bin/
sudo cp ectus-cli /usr/local/bin/

# Make executable
sudo chmod +x /usr/local/bin/ectus-server
sudo chmod +x /usr/local/bin/ectus-cli

echo "Ectus-R installed successfully!"
echo "Run 'ectus-server' to start the server"
"#;

    fs::write(portable_dir.join("install.sh"), install_script)?;

    // Make install script executable
    Command::new("chmod")
        .args(&["+x", "install.sh"])
        .current_dir(&portable_dir)
        .output()?;

    // Create README
    let readme = format!(r#"# Ectus-R Portable v{}

## Installation
Run: ./install.sh

## Manual Installation
1. Copy ectus-server and ectus-cli to your PATH
2. Make them executable: chmod +x ectus-server ectus-cli

## Usage
- Start server: ectus-server
- CLI help: ectus-cli --help

## Support
Visit https://ectus.ai
"#, version);

    fs::write(portable_dir.join("README.md"), readme)?;

    // Create tarball
    Command::new("tar")
        .args(&[
            "-czf",
            &format!("ectus-r-{}-linux-x86_64-portable.tar.gz", version),
            "ectus-r-portable"
        ])
        .current_dir(installer_dir)
        .output()
        .context("Failed to create tarball")?;

    Ok(())
}

fn current_os() -> String {
    if cfg!(target_os = "windows") {
        "windows".to_string()
    } else if cfg!(target_os = "macos") {
        "macos".to_string()
    } else {
        "linux".to_string()
    }
}