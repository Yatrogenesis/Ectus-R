version: '3.8'

services:
  # AION-R Main Application Server
  aion-server:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: aion-server
    restart: unless-stopped
    ports:
      - "8080:8080"  # API port
      - "9090:9090"  # Metrics port
    environment:
      - AION_ENVIRONMENT=production
      - AION_LOG_LEVEL=info
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=aion
      - DB_USER=aion_user
      - DB_PASSWORD=${DB_PASSWORD:-aion_secure_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WAIT_FOR_DB=true
      - RUN_MIGRATIONS=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - aion_data:/app/data
      - aion_logs:/app/logs
      - ./config/production.toml:/app/config/default.toml:ro
    networks:
      - aion_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # AION-R Background Worker
  aion-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: aion-worker
    restart: unless-stopped
    command: ["worker"]
    environment:
      - AION_ENVIRONMENT=production
      - AION_LOG_LEVEL=info
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=aion
      - DB_USER=aion_user
      - DB_PASSWORD=${DB_PASSWORD:-aion_secure_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WAIT_FOR_DB=true
      - RUN_MIGRATIONS=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      aion-server:
        condition: service_healthy
    volumes:
      - aion_data:/app/data
      - aion_logs:/app/logs
      - ./config/production.toml:/app/config/default.toml:ro
    networks:
      - aion_network

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: aion-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=aion
      - POSTGRES_USER=aion_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-aion_secure_password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - aion_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aion_user -d aion"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aion-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-aion_redis_password} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - aion_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aion-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - aion-server
    networks:
      - aion_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: aion-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - aion_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: aion-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_secure_password}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - aion_network

  # Elasticsearch for Logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: aion-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - aion_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: aion-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - aion_network

volumes:
  aion_data:
    driver: local
  aion_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  aion_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16